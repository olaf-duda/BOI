{"ast":null,"code":"import \"expo/build/Expo.fx\";\nimport \"@expo/metro-runtime\";\nimport { withErrorOverlay } from \"@expo/metro-runtime/error-overlay\";\nimport * as React from \"react\";\nimport AppRegistry from \"react-native-web/dist/exports/AppRegistry\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { createRoot, hydrateRoot } from \"./createRoot\";\nvar rootTag = null;\nexport default function registerRootComponent(component) {\n  var qualifiedComponent = component;\n  if (process.env.NODE_ENV !== \"production\") {\n    var _ref = require(\"expo/build/launch/withDevTools\"),\n      withDevTools = _ref.withDevTools;\n    qualifiedComponent = withErrorOverlay(withDevTools(component));\n  }\n  if (Platform.OS !== \"web\") {\n    AppRegistry.registerComponent(\"main\", function () {\n      return qualifiedComponent;\n    });\n  } else if (typeof document !== \"undefined\") {\n    var tag = document.getElementById(\"root\");\n    if (!tag) {\n      tag = document.getElementById(\"main\");\n      if (process.env.NODE_ENV !== \"production\") {\n        if (tag) {\n          console.warn('Mounting the root React component to an HTML element with id \"main\" is deprecated. Use id \"root\" instead.');\n        }\n      }\n    }\n    if (!tag) {\n      throw new Error('Required HTML element with id \"root\" was not found in the document HTML. This is required for mounting the root React component.');\n    }\n    if (process.env.EXPO_PUBLIC_USE_STATIC) {\n      hydrateRoot(tag, React.createElement(qualifiedComponent));\n    } else {\n      rootTag ??= createRoot(tag);\n      rootTag.render(React.createElement(qualifiedComponent));\n    }\n  }\n}","map":{"version":3,"names":["withErrorOverlay","React","AppRegistry","Platform","createRoot","hydrateRoot","rootTag","registerRootComponent","component","qualifiedComponent","process","env","NODE_ENV","_ref","require","withDevTools","OS","registerComponent","document","tag","getElementById","console","warn","Error","EXPO_PUBLIC_USE_STATIC","createElement","render"],"sources":["C:/Users/Bartek/react_native_boi/node_modules/expo-router/src/fork/expo/registerRootComponent.tsx"],"sourcesContent":["// Fork of:\n// https://github.com/expo/expo/blob/main/packages/expo/src/launch/registerRootComponent.tsx\n// Originally made in Expo SDK 47 to add support for React 18 and Metro web.\nimport \"expo/build/Expo.fx\";\n\n// NOTE(EvanBacon): Add Metro web support to the global runtime.\nimport \"@expo/metro-runtime\";\n\n// @ts-ignore: build order issue\nimport { withErrorOverlay } from \"@expo/metro-runtime/error-overlay\";\nimport * as React from \"react\";\nimport { AppRegistry, Platform } from \"react-native\";\n\nimport { createRoot, hydrateRoot } from \"./createRoot\";\n\ntype InitialProps = {\n  exp: {\n    notification?: any;\n    manifestString?: string;\n    [key: string]: any;\n  };\n  shell?: boolean;\n  shellManifestUrl?: string;\n  [key: string]: any;\n};\n\n// Web root tag is preserved for re-use between refreshes.\nlet rootTag: import(\"react-dom/client\").Root | null = null;\n\nexport default function registerRootComponent<P extends InitialProps>(\n  component: React.ComponentType<P>\n): void {\n  let qualifiedComponent = component;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    const { withDevTools } =\n      require(\"expo/build/launch/withDevTools\") as typeof import(\"expo/build/launch/withDevTools\");\n    // Add error support to the root component.\n    qualifiedComponent = withErrorOverlay(withDevTools(component));\n  }\n\n  if (Platform.OS !== \"web\") {\n    AppRegistry.registerComponent(\"main\", () => qualifiedComponent);\n  } else if (\n    // Skip querying the DOM if we're in a Node.js environment.\n    typeof document !== \"undefined\"\n  ) {\n    let tag = document.getElementById(\"root\");\n\n    if (!tag) {\n      tag = document.getElementById(\"main\");\n      if (process.env.NODE_ENV !== \"production\") {\n        // This block will be removed in production\n        if (tag) {\n          console.warn(\n            'Mounting the root React component to an HTML element with id \"main\" is deprecated. Use id \"root\" instead.'\n          );\n        }\n      }\n    }\n\n    if (!tag) {\n      throw new Error(\n        'Required HTML element with id \"root\" was not found in the document HTML. This is required for mounting the root React component.'\n      );\n    }\n\n    // Using React 18 directly because `react-native-web` still uses the old API:\n    // https://github.com/necolas/react-native-web/blob/e8098fd029102d7801c32c1ede792bce01808c00/packages/react-native-web/src/exports/render/index.js#L10\n    if (process.env.EXPO_PUBLIC_USE_STATIC) {\n      hydrateRoot(tag, React.createElement(qualifiedComponent));\n    } else {\n      rootTag ??= createRoot(tag);\n      rootTag.render(React.createElement(qualifiedComponent));\n    }\n  }\n}\n"],"mappings":"AAGA,OAAO,oBAAoB;AAG3B,OAAO,qBAAqB;AAG5B,SAASA,gBAAgB,QAAQ,mCAAmC;AACpE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,OAAAC,WAAA;AAAA,OAAAC,QAAA;AAG/B,SAASC,UAAU,EAAEC,WAAW;AAchC,IAAIC,OAA+C,GAAG,IAAI;AAE1D,eAAe,SAASC,qBAAqBA,CAC3CC,SAAiC,EAC3B;EACN,IAAIC,kBAAkB,GAAGD,SAAS;EAElC,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAAC,IAAA,GACEC,OAAO,CAAC,gCAAgC,CAAC;MADnCC,YAAY,GAAAF,IAAA,CAAZE,YAAY;IAGpBN,kBAAkB,GAAGT,gBAAgB,CAACe,YAAY,CAACP,SAAS,CAAC,CAAC;EAChE;EAEA,IAAIL,QAAQ,CAACa,EAAE,KAAK,KAAK,EAAE;IACzBd,WAAW,CAACe,iBAAiB,CAAC,MAAM,EAAE;MAAA,OAAMR,kBAAkB;IAAA,EAAC;EACjE,CAAC,MAAM,IAEL,OAAOS,QAAQ,KAAK,WAAW,EAC/B;IACA,IAAIC,GAAG,GAAGD,QAAQ,CAACE,cAAc,CAAC,MAAM,CAAC;IAEzC,IAAI,CAACD,GAAG,EAAE;MACRA,GAAG,GAAGD,QAAQ,CAACE,cAAc,CAAC,MAAM,CAAC;MACrC,IAAIV,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QAEzC,IAAIO,GAAG,EAAE;UACPE,OAAO,CAACC,IAAI,CACV,2GACF,CAAC;QACH;MACF;IACF;IAEA,IAAI,CAACH,GAAG,EAAE;MACR,MAAM,IAAII,KAAK,CACb,kIACF,CAAC;IACH;IAIA,IAAIb,OAAO,CAACC,GAAG,CAACa,sBAAsB,EAAE;MACtCnB,WAAW,CAACc,GAAG,EAAElB,KAAK,CAACwB,aAAa,CAAChB,kBAAkB,CAAC,CAAC;IAC3D,CAAC,MAAM;MACLH,OAAO,KAAKF,UAAU,CAACe,GAAG,CAAC;MAC3Bb,OAAO,CAACoB,MAAM,CAACzB,KAAK,CAACwB,aAAa,CAAChB,kBAAkB,CAAC,CAAC;IACzD;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}