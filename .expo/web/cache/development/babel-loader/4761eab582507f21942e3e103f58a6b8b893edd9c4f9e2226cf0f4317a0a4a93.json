{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar pretty_format_1 = __importStar(require(\"pretty-format\"));\nvar LoadingView_1 = __importDefault(require(\"./LoadingView\"));\nvar LogBox_1 = __importDefault(require(\"./error-overlay/LogBox\"));\nvar getDevServer_1 = __importDefault(require(\"./getDevServer\"));\nvar MetroHMRClient = require(\"metro-runtime/src/modules/HMRClient\");\nvar pendingEntryPoints = [];\nvar hmrClient = null;\nvar hmrUnavailableReason = null;\nvar currentCompileErrorMessage = null;\nvar didConnect = false;\nvar pendingLogs = [];\nfunction assert(foo, msg) {\n  if (!foo) throw new Error(msg);\n}\nvar HMRClient = {\n  enable: function enable() {\n    if (hmrUnavailableReason !== null) {\n      throw new Error(hmrUnavailableReason);\n    }\n    assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n    hmrClient.send(JSON.stringify({\n      type: \"log-opt-in\"\n    }));\n    var hasUpdates = hmrClient.hasPendingUpdates();\n    if (hasUpdates) {\n      LoadingView_1.default.showMessage(\"Refreshing...\", \"refresh\");\n    }\n    try {\n      hmrClient.enable();\n    } finally {\n      if (hasUpdates) {\n        LoadingView_1.default.hide();\n      }\n    }\n    showCompileError();\n  },\n  disable: function disable() {\n    assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n    hmrClient.disable();\n  },\n  registerBundle: function registerBundle(requestUrl) {\n    assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n    pendingEntryPoints.push(requestUrl);\n    registerBundleEntryPoints(hmrClient);\n  },\n  log: function log(level, data) {\n    if (!hmrClient) {\n      pendingLogs.push([level, data]);\n      if (pendingLogs.length > 100) {\n        pendingLogs.shift();\n      }\n      return;\n    }\n    try {\n      hmrClient.send(JSON.stringify({\n        type: \"log\",\n        level: level,\n        mode: \"BRIDGE\",\n        data: data.map(function (item) {\n          return typeof item === \"string\" ? item : (0, pretty_format_1.default)(item, {\n            escapeString: true,\n            highlight: true,\n            maxDepth: 3,\n            min: true,\n            plugins: [pretty_format_1.plugins.ReactElement]\n          });\n        })\n      }));\n    } catch (_unused) {}\n  },\n  setup: function setup(_ref) {\n    var isEnabled = _ref.isEnabled;\n    assert(!hmrClient, \"Cannot initialize hmrClient twice\");\n    var serverScheme = window.location.protocol === \"https:\" ? \"wss\" : \"ws\";\n    var client = new MetroHMRClient(`${serverScheme}://${window.location.host}/hot`);\n    hmrClient = client;\n    var _ref2 = (0, getDevServer_1.default)(),\n      fullBundleUrl = _ref2.fullBundleUrl;\n    pendingEntryPoints.push(fullBundleUrl);\n    client.on(\"connection-error\", function (e) {\n      var error = `Cannot connect to Metro.\n \n Try the following to fix the issue:\n - Ensure the Metro dev server is running and available on the same network as this device`;\n      error += `\n \n URL: ${window.location.host}\n \n Error: ${e.message}`;\n      setHMRUnavailableReason(error);\n    });\n    client.on(\"update-start\", function (_ref3) {\n      var isInitialUpdate = _ref3.isInitialUpdate;\n      currentCompileErrorMessage = null;\n      didConnect = true;\n      if (client.isEnabled() && !isInitialUpdate) {\n        LoadingView_1.default.showMessage(\"Refreshing...\", \"refresh\");\n      }\n    });\n    client.on(\"update\", function (_ref4) {\n      var isInitialUpdate = _ref4.isInitialUpdate;\n      if (client.isEnabled() && !isInitialUpdate) {\n        dismissRedbox();\n        LogBox_1.default.clearAllLogs();\n      }\n    });\n    client.on(\"update-done\", function () {\n      LoadingView_1.default.hide();\n    });\n    client.on(\"error\", function (data) {\n      LoadingView_1.default.hide();\n      if (data.type === \"GraphNotFoundError\") {\n        client.close();\n        setHMRUnavailableReason(\"Metro has restarted since the last edit. Reload to reconnect.\");\n      } else if (data.type === \"RevisionNotFoundError\") {\n        client.close();\n        setHMRUnavailableReason(\"Metro and the client are out of sync. Reload to reconnect.\");\n      } else {\n        currentCompileErrorMessage = `${data.type} ${data.message}`;\n        if (client.isEnabled()) {\n          showCompileError();\n        }\n      }\n    });\n    client.on(\"close\", function (closeEvent) {\n      LoadingView_1.default.hide();\n      var isNormalOrUnsetCloseReason = closeEvent == null || closeEvent.code === 1000 || closeEvent.code === 1005 || closeEvent.code == null;\n      setHMRUnavailableReason(`${isNormalOrUnsetCloseReason ? \"Disconnected from Metro.\" : `Disconnected from Metro (${closeEvent.code}: \"${closeEvent.reason}\").`}\n\nTo reconnect:\n- Ensure that Metro is running and available on the same network\n- Reload this app (will trigger further help if Metro cannot be connected to)\n      `);\n    });\n    if (isEnabled) {\n      HMRClient.enable();\n    } else {\n      HMRClient.disable();\n    }\n    registerBundleEntryPoints(hmrClient);\n    flushEarlyLogs();\n  }\n};\nfunction setHMRUnavailableReason(reason) {\n  assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n  if (hmrUnavailableReason !== null) {\n    return;\n  }\n  hmrUnavailableReason = reason;\n  if (hmrClient.isEnabled() && didConnect) {\n    console.warn(reason);\n  }\n}\nfunction registerBundleEntryPoints(client) {\n  if (hmrUnavailableReason != null) {\n    window.location.reload();\n    return;\n  }\n  if (pendingEntryPoints.length > 0) {\n    client === null || client === void 0 ? void 0 : client.send(JSON.stringify({\n      type: \"register-entrypoints\",\n      entryPoints: pendingEntryPoints\n    }));\n    pendingEntryPoints.length = 0;\n  }\n}\nfunction flushEarlyLogs() {\n  try {\n    pendingLogs.forEach(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n        level = _ref6[0],\n        data = _ref6[1];\n      HMRClient.log(level, data);\n    });\n  } finally {\n    pendingLogs.length = 0;\n  }\n}\nfunction dismissRedbox() {}\nfunction showCompileError() {\n  if (currentCompileErrorMessage === null) {\n    return;\n  }\n  dismissRedbox();\n  var message = currentCompileErrorMessage;\n  currentCompileErrorMessage = null;\n  var error = new Error(message);\n  error.preventSymbolication = true;\n  throw error;\n}\nexports.default = HMRClient;","map":{"version":3,"names":["pretty_format_1","__importStar","require","LoadingView_1","__importDefault","LogBox_1","getDevServer_1","MetroHMRClient","pendingEntryPoints","hmrClient","hmrUnavailableReason","currentCompileErrorMessage","didConnect","pendingLogs","assert","foo","msg","Error","HMRClient","enable","send","JSON","stringify","type","hasUpdates","hasPendingUpdates","default","showMessage","hide","showCompileError","disable","registerBundle","requestUrl","push","registerBundleEntryPoints","log","level","data","length","shift","mode","map","item","escapeString","highlight","maxDepth","min","plugins","ReactElement","_unused","setup","_ref","isEnabled","serverScheme","window","location","protocol","client","host","_ref2","fullBundleUrl","on","e","error","message","setHMRUnavailableReason","_ref3","isInitialUpdate","_ref4","dismissRedbox","clearAllLogs","close","closeEvent","isNormalOrUnsetCloseReason","code","reason","flushEarlyLogs","console","warn","reload","entryPoints","forEach","_ref5","_ref6","_slicedToArray","preventSymbolication","exports"],"sources":["C:\\Users\\Bartek\\react_native_boi\\node_modules\\@expo\\metro-runtime\\src\\HMRClient.ts"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on this but with web support:\n * https://github.com/facebook/react-native/blob/086714b02b0fb838dee5a66c5bcefe73b53cf3df/Libraries/Utilities/HMRClient.js\n */\nimport prettyFormat, { plugins } from \"pretty-format\";\n\nimport LoadingView from \"./LoadingView\";\nimport LogBox from \"./error-overlay/LogBox\";\nimport getDevServer from \"./getDevServer\";\n\nconst MetroHMRClient = require(\"metro-runtime/src/modules/HMRClient\");\nconst pendingEntryPoints: string[] = [];\n\ntype HMRClientType = {\n  send: (msg: string) => void;\n  isEnabled: () => boolean;\n  disable: () => void;\n  enable: () => void;\n  hasPendingUpdates: () => boolean;\n};\n\nlet hmrClient: HMRClientType | null = null;\nlet hmrUnavailableReason: string | null = null;\nlet currentCompileErrorMessage: string | null = null;\nlet didConnect: boolean = false;\nconst pendingLogs: [LogLevel, any[]][] = [];\n\ntype LogLevel =\n  | \"trace\"\n  | \"info\"\n  | \"warn\"\n  | \"error\"\n  | \"log\"\n  | \"group\"\n  | \"groupCollapsed\"\n  | \"groupEnd\"\n  | \"debug\";\n\nexport type HMRClientNativeInterface = {\n  enable(): void;\n  disable(): void;\n  registerBundle(requestUrl: string): void;\n  log(level: LogLevel, data: any[]): void;\n  setup(props: { isEnabled: boolean }): void;\n};\n\nfunction assert(foo: any, msg: string): asserts foo {\n  if (!foo) throw new Error(msg);\n}\n\n/**\n * HMR Client that receives from the server HMR updates and propagates them\n * runtime to reflects those changes.\n */\nconst HMRClient: HMRClientNativeInterface = {\n  enable() {\n    if (hmrUnavailableReason !== null) {\n      // If HMR became unavailable while you weren't using it,\n      // explain why when you try to turn it on.\n      // This is an error (and not a warning) because it is shown\n      // in response to a direct user action.\n      throw new Error(hmrUnavailableReason);\n    }\n\n    assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n\n    // We use this for internal logging only.\n    // It doesn't affect the logic.\n    hmrClient.send(JSON.stringify({ type: \"log-opt-in\" }));\n\n    // When toggling Fast Refresh on, we might already have some stashed updates.\n    // Since they'll get applied now, we'll show a banner.\n    const hasUpdates = hmrClient!.hasPendingUpdates();\n\n    if (hasUpdates) {\n      LoadingView.showMessage(\"Refreshing...\", \"refresh\");\n    }\n    try {\n      hmrClient.enable();\n    } finally {\n      if (hasUpdates) {\n        LoadingView.hide();\n      }\n    }\n\n    // There could be a compile error while Fast Refresh was off,\n    // but we ignored it at the time. Show it now.\n    showCompileError();\n  },\n\n  disable() {\n    assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n    hmrClient.disable();\n  },\n\n  registerBundle(requestUrl: string) {\n    assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n    pendingEntryPoints.push(requestUrl);\n    registerBundleEntryPoints(hmrClient);\n  },\n\n  log(level: LogLevel, data: any[]) {\n    if (!hmrClient) {\n      // Catch a reasonable number of early logs\n      // in case hmrClient gets initialized later.\n      pendingLogs.push([level, data]);\n      if (pendingLogs.length > 100) {\n        pendingLogs.shift();\n      }\n      return;\n    }\n    try {\n      hmrClient.send(\n        JSON.stringify({\n          type: \"log\",\n          level,\n          mode: \"BRIDGE\",\n          data: data.map((item) =>\n            typeof item === \"string\"\n              ? item\n              : prettyFormat(item, {\n                  escapeString: true,\n                  highlight: true,\n                  maxDepth: 3,\n                  min: true,\n                  plugins: [plugins.ReactElement],\n                })\n          ),\n        })\n      );\n    } catch {\n      // If sending logs causes any failures we want to silently ignore them\n      // to ensure we do not cause infinite-logging loops.\n    }\n  },\n\n  // Called once by the bridge on startup, even if Fast Refresh is off.\n  // It creates the HMR client but doesn't actually set up the socket yet.\n  setup({ isEnabled }: { isEnabled: boolean }) {\n    assert(!hmrClient, \"Cannot initialize hmrClient twice\");\n\n    const serverScheme = window.location.protocol === \"https:\" ? \"wss\" : \"ws\";\n    const client = new MetroHMRClient(\n      `${serverScheme}://${window.location.host}/hot`\n    );\n    hmrClient = client;\n\n    const { fullBundleUrl } = getDevServer();\n    pendingEntryPoints.push(\n      // HMRServer understands regular bundle URLs, so prefer that in case\n      // there are any important URL parameters we can't reconstruct from\n      // `setup()`'s arguments.\n      fullBundleUrl\n    );\n\n    client.on(\"connection-error\", (e: Error) => {\n      let error = `Cannot connect to Metro.\n \n Try the following to fix the issue:\n - Ensure the Metro dev server is running and available on the same network as this device`;\n      error += `\n \n URL: ${window.location.host}\n \n Error: ${e.message}`;\n\n      setHMRUnavailableReason(error);\n    });\n\n    client.on(\n      \"update-start\",\n      ({ isInitialUpdate }: { isInitialUpdate?: boolean }) => {\n        currentCompileErrorMessage = null;\n        didConnect = true;\n\n        if (client.isEnabled() && !isInitialUpdate) {\n          LoadingView.showMessage(\"Refreshing...\", \"refresh\");\n        }\n      }\n    );\n\n    client.on(\n      \"update\",\n      ({ isInitialUpdate }: { isInitialUpdate?: boolean }) => {\n        if (client.isEnabled() && !isInitialUpdate) {\n          dismissRedbox();\n          LogBox.clearAllLogs();\n        }\n      }\n    );\n\n    client.on(\"update-done\", () => {\n      LoadingView.hide();\n    });\n\n    client.on(\"error\", (data: { type: string; message: string }) => {\n      LoadingView.hide();\n\n      if (data.type === \"GraphNotFoundError\") {\n        client.close();\n        setHMRUnavailableReason(\n          \"Metro has restarted since the last edit. Reload to reconnect.\"\n        );\n      } else if (data.type === \"RevisionNotFoundError\") {\n        client.close();\n        setHMRUnavailableReason(\n          \"Metro and the client are out of sync. Reload to reconnect.\"\n        );\n      } else {\n        currentCompileErrorMessage = `${data.type} ${data.message}`;\n        if (client.isEnabled()) {\n          showCompileError();\n        }\n      }\n    });\n\n    client.on(\"close\", (closeEvent: { code: number; reason: string }) => {\n      LoadingView.hide();\n\n      // https://www.rfc-editor.org/rfc/rfc6455.html#section-7.4.1\n      // https://www.rfc-editor.org/rfc/rfc6455.html#section-7.1.5\n      const isNormalOrUnsetCloseReason =\n        closeEvent == null ||\n        closeEvent.code === 1000 ||\n        closeEvent.code === 1005 ||\n        closeEvent.code == null;\n\n      setHMRUnavailableReason(\n        `${\n          isNormalOrUnsetCloseReason\n            ? \"Disconnected from Metro.\"\n            : `Disconnected from Metro (${closeEvent.code}: \"${closeEvent.reason}\").`\n        }\n\nTo reconnect:\n- Ensure that Metro is running and available on the same network\n- Reload this app (will trigger further help if Metro cannot be connected to)\n      `\n      );\n    });\n\n    if (isEnabled) {\n      HMRClient.enable();\n    } else {\n      HMRClient.disable();\n    }\n\n    registerBundleEntryPoints(hmrClient);\n    flushEarlyLogs();\n  },\n};\n\nfunction setHMRUnavailableReason(reason: string) {\n  assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n  if (hmrUnavailableReason !== null) {\n    // Don't show more than one warning.\n    return;\n  }\n  hmrUnavailableReason = reason;\n\n  // We only want to show a warning if Fast Refresh is on *and* if we ever\n  // previously managed to connect successfully. We don't want to show\n  // the warning to native engineers who use cached bundles without Metro.\n  if (hmrClient.isEnabled() && didConnect) {\n    console.warn(reason);\n    // (Not using the `warning` module to prevent a Buck cycle.)\n  }\n}\n\nfunction registerBundleEntryPoints(client: HMRClientType | null) {\n  if (hmrUnavailableReason != null) {\n    // \"Bundle Splitting – Metro disconnected\"\n    window.location.reload();\n    return;\n  }\n\n  if (pendingEntryPoints.length > 0) {\n    client?.send(\n      JSON.stringify({\n        type: \"register-entrypoints\",\n        entryPoints: pendingEntryPoints,\n      })\n    );\n    pendingEntryPoints.length = 0;\n  }\n}\n\nfunction flushEarlyLogs() {\n  try {\n    pendingLogs.forEach(([level, data]) => {\n      HMRClient.log(level, data);\n    });\n  } finally {\n    pendingLogs.length = 0;\n  }\n}\n\nfunction dismissRedbox() {\n  // TODO(EvanBacon): Error overlay for web.\n}\n\nfunction showCompileError() {\n  if (currentCompileErrorMessage === null) {\n    return;\n  }\n\n  // Even if there is already a redbox, syntax errors are more important.\n  // Otherwise you risk seeing a stale runtime error while a syntax error is more recent.\n  dismissRedbox();\n\n  const message = currentCompileErrorMessage;\n  currentCompileErrorMessage = null;\n\n  const error = new Error(message);\n  // Symbolicating compile errors is wasted effort\n  // because the stack trace is meaningless:\n  // @ts-expect-error\n  error.preventSymbolication = true;\n  throw error;\n}\n\nexport default HMRClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}