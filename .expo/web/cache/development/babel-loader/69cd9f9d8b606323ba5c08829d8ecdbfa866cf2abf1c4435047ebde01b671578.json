{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nexport function getRouteInfoFromState(getPathFromState, state) {\n  var _getPathFromState = getPathFromState(state, false),\n    path = _getPathFromState.path;\n  var qualified = getPathFromState(state, true);\n  return _objectSpread({\n    unstable_globalHref: path,\n    pathname: path.split(\"?\")[\"0\"]\n  }, getNormalizedStatePath(qualified));\n}\nexport function getNormalizedStatePath(_ref) {\n  var statePath = _ref.path,\n    params = _ref.params;\n  var _statePath$split = statePath.split(\"?\"),\n    _statePath$split2 = _slicedToArray(_statePath$split, 1),\n    pathname = _statePath$split2[0];\n  return {\n    segments: pathname.split(\"/\").filter(Boolean).map(decodeURIComponent),\n    params: Object.entries(params).reduce(function (prev, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n      if (Array.isArray(value)) {\n        prev[key] = value.map(decodeURIComponent);\n      } else {\n        prev[key] = decodeURIComponent(value);\n      }\n      return prev;\n    }, {})\n  };\n}","map":{"version":3,"names":["getRouteInfoFromState","getPathFromState","state","_getPathFromState","path","qualified","_objectSpread","unstable_globalHref","pathname","split","getNormalizedStatePath","_ref","statePath","params","_statePath$split","_statePath$split2","_slicedToArray","segments","filter","Boolean","map","decodeURIComponent","Object","entries","reduce","prev","_ref2","_ref3","key","value","Array","isArray"],"sources":["C:/Users/Bartek/react_native_boi/node_modules/expo-router/src/LocationProvider.tsx"],"sourcesContent":["import { State } from \"./fork/getPathFromState\";\n\ntype SearchParams = Record<string, string | string[]>;\n\nexport type UrlObject = {\n  unstable_globalHref: string;\n  pathname: string;\n  readonly params: SearchParams;\n  segments: string[];\n};\n\nexport function getRouteInfoFromState(\n  getPathFromState: (\n    state: State,\n    asPath: boolean\n  ) => { path: string; params: any },\n  state: State\n): UrlObject {\n  const { path } = getPathFromState(state, false);\n  const qualified = getPathFromState(state, true);\n  return {\n    // TODO: This may have a predefined origin attached in the future.\n    unstable_globalHref: path,\n    pathname: path.split(\"?\")[\"0\"],\n    ...getNormalizedStatePath(qualified),\n  };\n}\n\n// TODO: Split up getPathFromState to return all this info at once.\nexport function getNormalizedStatePath({\n  path: statePath,\n  params,\n}: {\n  path: string;\n  params: any;\n}): Pick<UrlObject, \"segments\" | \"params\"> {\n  const [pathname] = statePath.split(\"?\");\n  return {\n    // Strip empty path at the start\n    segments: pathname.split(\"/\").filter(Boolean).map(decodeURIComponent),\n    // TODO: This is not efficient, we should generate based on the state instead\n    // of converting to string then back to object\n    params: Object.entries(params).reduce((prev, [key, value]) => {\n      if (Array.isArray(value)) {\n        prev[key] = value.map(decodeURIComponent);\n      } else {\n        prev[key] = decodeURIComponent(value as string);\n      }\n      return prev;\n    }, {} as SearchParams),\n  };\n}\n"],"mappings":";;;;AAWA,OAAO,SAASA,qBAAqBA,CACnCC,gBAGkC,EAClCC,KAAY,EACD;EACX,IAAAC,iBAAA,GAAiBF,gBAAgB,CAACC,KAAK,EAAE,KAAK,CAAC;IAAvCE,IAAI,GAAAD,iBAAA,CAAJC,IAAI;EACZ,IAAMC,SAAS,GAAGJ,gBAAgB,CAACC,KAAK,EAAE,IAAI,CAAC;EAC/C,OAAAI,aAAA;IAEEC,mBAAmB,EAAEH,IAAI;IACzBI,QAAQ,EAAEJ,IAAI,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG;EAAC,GAC3BC,sBAAsB,CAACL,SAAS,CAAC;AAExC;AAGA,OAAO,SAASK,sBAAsBA,CAAAC,IAAA,EAMK;EAAA,IALnCC,SAAS,GAAAD,IAAA,CAAfP,IAAI;IACJS,MAAM,GAAAF,IAAA,CAANE,MAAM;EAKN,IAAAC,gBAAA,GAAmBF,SAAS,CAACH,KAAK,CAAC,GAAG,CAAC;IAAAM,iBAAA,GAAAC,cAAA,CAAAF,gBAAA;IAAhCN,QAAQ,GAAAO,iBAAA;EACf,OAAO;IAELE,QAAQ,EAAET,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAACS,MAAM,CAACC,OAAO,CAAC,CAACC,GAAG,CAACC,kBAAkB,CAAC;IAGrER,MAAM,EAAES,MAAM,CAACC,OAAO,CAACV,MAAM,CAAC,CAACW,MAAM,CAAC,UAACC,IAAI,EAAAC,KAAA,EAAmB;MAAA,IAAAC,KAAA,GAAAX,cAAA,CAAAU,KAAA;QAAhBE,GAAG,GAAAD,KAAA;QAAEE,KAAK,GAAAF,KAAA;MACtD,IAAIG,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;QACxBJ,IAAI,CAACG,GAAG,CAAC,GAAGC,KAAK,CAACT,GAAG,CAACC,kBAAkB,CAAC;MAC3C,CAAC,MAAM;QACLI,IAAI,CAACG,GAAG,CAAC,GAAGP,kBAAkB,CAACQ,KAAe,CAAC;MACjD;MACA,OAAOJ,IAAI;IACb,CAAC,EAAE,CAAC,CAAiB;EACvB,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}