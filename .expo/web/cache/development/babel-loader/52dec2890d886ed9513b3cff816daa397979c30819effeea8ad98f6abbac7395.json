{"ast":null,"code":"function assertPath(path) {\n  if (typeof path !== \"string\") {\n    throw new TypeError(\"Path must be a string. Received \" + JSON.stringify(path));\n  }\n}\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = \"\";\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length) {\n      code = path.charCodeAt(i);\n    } else if (code === 47) {\n      break;\n    } else {\n      code = 47;\n    }\n    if (code === 47) {\n      if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf(\"/\");\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = \"\";\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf(\"/\");\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = \"\";\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0) res += \"/..\";else res = \"..\";\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) res += \"/\" + path.slice(lastSlash + 1, i);else res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\nexport function resolve() {\n  var resolvedPath = \"\";\n  var resolvedAbsolute = false;\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = void 0;\n    if (i >= 0) {\n      path = i < 0 || arguments.length <= i ? undefined : arguments[i];\n    } else {\n      path = \"/\";\n    }\n    assertPath(path);\n    if (path.length === 0) {\n      continue;\n    }\n    resolvedPath = path + \"/\" + resolvedPath;\n    resolvedAbsolute = path.charCodeAt(0) === 47;\n  }\n  resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n  if (resolvedAbsolute) {\n    if (resolvedPath.length > 0) {\n      return \"/\" + resolvedPath;\n    } else {\n      return \"/\";\n    }\n  } else if (resolvedPath.length > 0) {\n    return resolvedPath;\n  } else {\n    return \".\";\n  }\n}","map":{"version":3,"names":["assertPath","path","TypeError","JSON","stringify","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","code","i","length","charCodeAt","lastSlashIndex","lastIndexOf","slice","resolve","resolvedPath","resolvedAbsolute","arguments","undefined"],"sources":["C:/Users/Bartek/react_native_boi/node_modules/expo-router/src/link/path.ts"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://github.com/browserify/path-browserify/blob/master/index.js\n\nfunction assertPath(path: string) {\n  if (typeof path !== \"string\") {\n    throw new TypeError(\n      \"Path must be a string. Received \" + JSON.stringify(path)\n    );\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path: string, allowAboveRoot?: boolean) {\n  let res = \"\";\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let code;\n  for (let i = 0; i <= path.length; ++i) {\n    if (i < path.length) {\n      code = path.charCodeAt(i);\n    } else if (code === 47 /*/*/) {\n      break;\n    } else {\n      code = 47 /*/*/;\n    }\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (\n          res.length < 2 ||\n          lastSegmentLength !== 2 ||\n          res.charCodeAt(res.length - 1) !== 46 /*.*/ ||\n          res.charCodeAt(res.length - 2) !== 46 /*.*/\n        ) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(\"/\");\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = \"\";\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf(\"/\");\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = \"\";\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0) res += \"/..\";\n          else res = \"..\";\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) res += \"/\" + path.slice(lastSlash + 1, i);\n        else res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\n// path.resolve([from ...], to)\nexport function resolve(...segments: string[]) {\n  let resolvedPath = \"\";\n  let resolvedAbsolute = false;\n\n  for (let i = segments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    let path;\n    if (i >= 0) {\n      path = segments[i];\n    } else {\n      path = \"/\";\n    }\n\n    assertPath(path);\n\n    // Skip empty entries\n    if (path.length === 0) {\n      continue;\n    }\n\n    resolvedPath = path + \"/\" + resolvedPath;\n    resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n  if (resolvedAbsolute) {\n    if (resolvedPath.length > 0) {\n      return \"/\" + resolvedPath;\n    } else {\n      return \"/\";\n    }\n  } else if (resolvedPath.length > 0) {\n    return resolvedPath;\n  } else {\n    return \".\";\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}