{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Constants, { ExecutionEnvironment } from \"expo-constants\";\nimport * as Linking from \"expo-linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { adjustPathname } from \"../fork/extractPathFromURL\";\nimport getPathFromState from \"../fork/getPathFromState\";\nimport getStateFromPath from \"../fork/getStateFromPath\";\nexport function getInitialURL() {\n  if (process.env.NODE_ENV === \"test\") {\n    var _Linking$getInitialUR;\n    return (_Linking$getInitialUR = Linking.getInitialURL()) != null ? _Linking$getInitialUR : getRootURL();\n  }\n  if (Platform.OS === \"web\") {\n    var _window$location;\n    if (typeof window === \"undefined\") {\n      return \"\";\n    } else if (typeof ((_window$location = window.location) == null ? void 0 : _window$location.href) === \"string\") {\n      return window.location.href;\n    }\n  }\n  return Promise.race([_asyncToGenerator(function* () {\n    var url = yield Linking.getInitialURL();\n    if (url && Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n      var parsed = Linking.parse(url);\n      if (parsed.path === null || [\"\", \"/\"].includes(adjustPathname({\n        hostname: parsed.hostname,\n        pathname: parsed.path\n      }))) {\n        return getRootURL();\n      }\n    }\n    return url != null ? url : getRootURL();\n  })(), new Promise(function (resolve) {\n    return setTimeout(function () {\n      return resolve(getRootURL());\n    }, 150);\n  })]);\n}\nvar _rootURL;\nexport function getRootURL() {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL(\"/\");\n  }\n  return _rootURL;\n}\nexport function addEventListener(listener) {\n  var callback = undefined;\n  if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n    callback = function callback(_ref2) {\n      var url = _ref2.url;\n      var parsed = Linking.parse(url);\n      if (parsed.path === null || [\"\", \"/\"].includes(adjustPathname({\n        hostname: parsed.hostname,\n        pathname: parsed.path\n      }))) {\n        listener(getRootURL());\n      } else {\n        listener(url);\n      }\n    };\n  } else {\n    callback = function callback(_ref3) {\n      var url = _ref3.url;\n      return listener(url);\n    };\n  }\n  var subscription = Linking.addEventListener(\"url\", callback);\n  return function () {\n    subscription == null ? void 0 : subscription.remove == null ? void 0 : subscription.remove();\n  };\n}\nexport { getStateFromPath, getPathFromState };","map":{"version":3,"names":["Constants","ExecutionEnvironment","Linking","Platform","adjustPathname","getPathFromState","getStateFromPath","getInitialURL","process","env","NODE_ENV","_Linking$getInitialUR","getRootURL","OS","_window$location","window","location","href","Promise","race","_asyncToGenerator","url","executionEnvironment","StoreClient","parsed","parse","path","includes","hostname","pathname","resolve","setTimeout","_rootURL","undefined","createURL","addEventListener","listener","callback","_ref2","_ref3","subscription","remove"],"sources":["C:/Users/Bartek/react_native_boi/node_modules/expo-router/src/link/linking.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from \"expo-constants\";\nimport * as Linking from \"expo-linking\";\nimport { Platform } from \"react-native\";\n\nimport { adjustPathname } from \"../fork/extractPathFromURL\";\nimport getPathFromState from \"../fork/getPathFromState\";\nimport getStateFromPath from \"../fork/getStateFromPath\";\n\n// A custom getInitialURL is used on native to ensure the app always starts at\n// the root path if it's launched from something other than a deep link.\n// This helps keep the native functionality working like the web functionality.\n// For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n// then `/index` would be used on web and `/settings` would be used on native.\nexport function getInitialURL(): Promise<string | null> | string {\n  if (process.env.NODE_ENV === \"test\") {\n    return Linking.getInitialURL() ?? getRootURL();\n  }\n\n  if (Platform.OS === \"web\") {\n    if (typeof window === \"undefined\") {\n      return \"\";\n    } else if (typeof window.location?.href === \"string\") {\n      return window.location.href;\n    }\n  }\n  return Promise.race<string>([\n    (async () => {\n      const url = await Linking.getInitialURL();\n\n      // NOTE(EvanBacon): This could probably be wrapped with the development boundary\n      // since Expo Go is mostly just used in development.\n\n      // Expo Go is weird and requires the root path to be `/--/`\n      if (\n        url &&\n        Constants.executionEnvironment === ExecutionEnvironment.StoreClient\n      ) {\n        const parsed = Linking.parse(url);\n        // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n        // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n        if (\n          parsed.path === null ||\n          [\"\", \"/\"].includes(\n            adjustPathname({\n              hostname: parsed.hostname,\n              pathname: parsed.path,\n            })\n          )\n        ) {\n          return getRootURL();\n        }\n      }\n      // The path will be nullish in bare apps when the app is launched from the home screen.\n      // TODO(EvanBacon): define some policy around notifications.\n      return url ?? getRootURL();\n    })(),\n    new Promise<string>((resolve) =>\n      // Timeout in 150ms if `getInitialState` doesn't resolve\n      // Workaround for https://github.com/facebook/react-native/issues/25675\n      setTimeout(() => resolve(getRootURL()), 150)\n    ),\n  ]);\n}\n\nlet _rootURL: string | undefined;\n\nexport function getRootURL(): string {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL(\"/\");\n  }\n  return _rootURL;\n}\n\nexport function addEventListener(listener: (url: string) => void) {\n  let callback: (({ url }: { url: string }) => void) | undefined = undefined;\n\n  if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n    // This extra work is only done in the Expo Go app.\n    callback = ({ url }: { url: string }) => {\n      const parsed = Linking.parse(url);\n\n      // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n      // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n      if (\n        parsed.path === null ||\n        [\"\", \"/\"].includes(\n          adjustPathname({ hostname: parsed.hostname, pathname: parsed.path })\n        )\n      ) {\n        listener(getRootURL());\n      } else {\n        listener(url);\n      }\n    };\n  } else {\n    callback = ({ url }: { url: string }) => listener(url);\n  }\n  const subscription = Linking.addEventListener(\"url\", callback);\n\n  return () => {\n    // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n    subscription?.remove?.();\n  };\n}\n\nexport { getStateFromPath, getPathFromState };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}