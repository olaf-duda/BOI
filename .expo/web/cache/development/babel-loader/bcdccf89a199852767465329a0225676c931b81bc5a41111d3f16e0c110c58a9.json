{"ast":null,"code":"\"use strict\";\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogBoxLog = void 0;\nvar LogBoxSymbolication = __importStar(require(\"./LogBoxSymbolication\"));\nfunction componentStackToStack(componentStack) {\n  return componentStack.map(function (stack) {\n    var _a, _b, _c, _d;\n    return {\n      file: stack.fileName,\n      methodName: stack.content,\n      lineNumber: (_b = (_a = stack.location) === null || _a === void 0 ? void 0 : _a.row) !== null && _b !== void 0 ? _b : 0,\n      column: (_d = (_c = stack.location) === null || _c === void 0 ? void 0 : _c.column) !== null && _d !== void 0 ? _d : 0,\n      arguments: []\n    };\n  });\n}\nvar LogBoxLog = function () {\n  function LogBoxLog(data) {\n    _classCallCheck(this, LogBoxLog);\n    var _a, _b;\n    this.symbolicated = {\n      stack: {\n        error: null,\n        stack: null,\n        status: \"NONE\"\n      },\n      component: {\n        error: null,\n        stack: null,\n        status: \"NONE\"\n      }\n    };\n    this.callbacks = new Map();\n    this.componentStackCache = null;\n    this.level = data.level;\n    this.type = (_a = data.type) !== null && _a !== void 0 ? _a : \"error\";\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n    this.symbolicated = (_b = data.symbolicated) !== null && _b !== void 0 ? _b : this.symbolicated;\n  }\n  _createClass(LogBoxLog, [{\n    key: \"incrementCount\",\n    value: function incrementCount() {\n      this.count += 1;\n    }\n  }, {\n    key: \"getAvailableStack\",\n    value: function getAvailableStack(type) {\n      if (this.symbolicated[type].status === \"COMPLETE\") {\n        return this.symbolicated[type].stack;\n      }\n      return this.getStack(type);\n    }\n  }, {\n    key: \"flushCallbacks\",\n    value: function flushCallbacks(type) {\n      var callbacks = this.callbacks.get(type);\n      var status = this.symbolicated[type].status;\n      if (callbacks) {\n        for (var callback of callbacks) {\n          callback(status);\n        }\n        callbacks.clear();\n      }\n    }\n  }, {\n    key: \"pushCallback\",\n    value: function pushCallback(type, callback) {\n      var callbacks = this.callbacks.get(type);\n      if (!callbacks) {\n        callbacks = new Set();\n        this.callbacks.set(type, callbacks);\n      }\n      callbacks.add(callback);\n    }\n  }, {\n    key: \"retrySymbolicate\",\n    value: function retrySymbolicate(type, callback) {\n      this._symbolicate(type, true, callback);\n    }\n  }, {\n    key: \"symbolicate\",\n    value: function symbolicate(type, callback) {\n      this._symbolicate(type, false, callback);\n    }\n  }, {\n    key: \"_symbolicate\",\n    value: function _symbolicate(type, retry, callback) {\n      if (callback) {\n        this.pushCallback(type, callback);\n      }\n      var status = this.symbolicated[type].status;\n      if (status === \"COMPLETE\") {\n        return this.flushCallbacks(type);\n      }\n      if (retry) {\n        LogBoxSymbolication.deleteStack(this.getStack(type));\n        this.handleSymbolicate(type);\n      } else {\n        if (status === \"NONE\") {\n          this.handleSymbolicate(type);\n        }\n      }\n    }\n  }, {\n    key: \"getStack\",\n    value: function getStack(type) {\n      if (type === \"component\") {\n        if (this.componentStackCache == null) {\n          this.componentStackCache = componentStackToStack(this.componentStack);\n        }\n        return this.componentStackCache;\n      }\n      return this.stack;\n    }\n  }, {\n    key: \"handleSymbolicate\",\n    value: function handleSymbolicate(type) {\n      var _this = this;\n      var _a;\n      if (type === \"component\" && !((_a = this.componentStack) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      if (this.symbolicated[type].status !== \"PENDING\") {\n        this.updateStatus(type, null, null, null);\n        LogBoxSymbolication.symbolicate(this.getStack(type)).then(function (data) {\n          _this.updateStatus(type, null, data === null || data === void 0 ? void 0 : data.stack, data === null || data === void 0 ? void 0 : data.codeFrame);\n        }, function (error) {\n          _this.updateStatus(type, error, null, null);\n        });\n      }\n    }\n  }, {\n    key: \"updateStatus\",\n    value: function updateStatus(type, error, stack, codeFrame) {\n      var lastStatus = this.symbolicated[type].status;\n      if (error != null) {\n        this.symbolicated[type] = {\n          error: error,\n          stack: null,\n          status: \"FAILED\"\n        };\n      } else if (stack != null) {\n        if (codeFrame) {\n          this.codeFrame = codeFrame;\n        }\n        this.symbolicated[type] = {\n          error: null,\n          stack: stack,\n          status: \"COMPLETE\"\n        };\n      } else {\n        this.symbolicated[type] = {\n          error: null,\n          stack: null,\n          status: \"PENDING\"\n        };\n      }\n      var status = this.symbolicated[type].status;\n      if (lastStatus !== status) {\n        if ([\"COMPLETE\", \"FAILED\"].includes(status)) {\n          this.flushCallbacks(type);\n        }\n      }\n    }\n  }]);\n  return LogBoxLog;\n}();\nexports.LogBoxLog = LogBoxLog;","map":{"version":3,"names":["LogBoxSymbolication","__importStar","require","componentStackToStack","componentStack","map","stack","file","fileName","methodName","content","lineNumber","_b","_a","location","row","column","_d","_c","arguments","LogBoxLog","data","_classCallCheck","symbolicated","error","status","component","callbacks","Map","componentStackCache","level","type","message","category","codeFrame","isComponentError","count","_createClass","key","value","incrementCount","getAvailableStack","getStack","flushCallbacks","get","callback","clear","pushCallback","Set","set","add","retrySymbolicate","_symbolicate","symbolicate","retry","deleteStack","handleSymbolicate","_this","length","updateStatus","then","lastStatus","includes","exports"],"sources":["C:\\Users\\Bartek\\react_native_boi\\node_modules\\@expo\\metro-runtime\\src\\error-overlay\\Data\\LogBoxLog.ts"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as LogBoxSymbolication from \"./LogBoxSymbolication\";\nimport type { Stack } from \"./LogBoxSymbolication\";\nimport type {\n  Category,\n  Message,\n  ComponentStack,\n  CodeFrame,\n} from \"./parseLogBoxLog\";\n\ntype SymbolicationStatus = \"NONE\" | \"PENDING\" | \"COMPLETE\" | \"FAILED\";\n\nexport type LogLevel = \"warn\" | \"error\" | \"fatal\" | \"syntax\" | \"static\";\n\nexport type LogBoxLogData = {\n  level: LogLevel;\n  type?: string;\n  message: Message;\n  stack: Stack;\n  category: string;\n  componentStack: ComponentStack;\n  codeFrame?: CodeFrame;\n  isComponentError: boolean;\n};\n\nexport type StackType = \"stack\" | \"component\";\n\nfunction componentStackToStack(componentStack: ComponentStack): Stack {\n  return componentStack.map((stack) => ({\n    file: stack.fileName,\n    methodName: stack.content,\n    lineNumber: stack.location?.row ?? 0,\n    column: stack.location?.column ?? 0,\n    arguments: [],\n  }));\n}\n\ntype SymbolicationCallback = (status: SymbolicationStatus) => void;\n\ntype SymbolicationResult =\n  | { error: null; stack: null; status: \"NONE\" }\n  | { error: null; stack: null; status: \"PENDING\" }\n  | { error: null; stack: Stack; status: \"COMPLETE\" }\n  | { error: Error; stack: null; status: \"FAILED\" };\n\nexport class LogBoxLog {\n  message: Message;\n  type: string;\n  category: Category;\n  componentStack: ComponentStack;\n  stack: Stack;\n  count: number;\n  level: LogLevel;\n  codeFrame?: CodeFrame;\n  isComponentError: boolean;\n  symbolicated: Record<StackType, SymbolicationResult> = {\n    stack: {\n      error: null,\n      stack: null,\n      status: \"NONE\",\n    },\n    component: {\n      error: null,\n      stack: null,\n      status: \"NONE\",\n    },\n  };\n\n  private callbacks: Map<StackType, Set<SymbolicationCallback>> = new Map();\n\n  constructor(\n    data: LogBoxLogData & {\n      symbolicated?: Record<StackType, SymbolicationResult>;\n    }\n  ) {\n    this.level = data.level;\n    this.type = data.type ?? \"error\";\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n    this.symbolicated = data.symbolicated ?? this.symbolicated;\n  }\n\n  incrementCount(): void {\n    this.count += 1;\n  }\n\n  getAvailableStack(type: StackType): Stack | null {\n    if (this.symbolicated[type].status === \"COMPLETE\") {\n      return this.symbolicated[type].stack;\n    }\n    return this.getStack(type);\n  }\n\n  private flushCallbacks(type: StackType): void {\n    const callbacks = this.callbacks.get(type);\n    const status = this.symbolicated[type].status;\n    if (callbacks) {\n      for (const callback of callbacks) {\n        callback(status);\n      }\n      callbacks.clear();\n    }\n  }\n\n  private pushCallback(type: StackType, callback: SymbolicationCallback): void {\n    let callbacks = this.callbacks.get(type);\n    if (!callbacks) {\n      callbacks = new Set();\n      this.callbacks.set(type, callbacks);\n    }\n    callbacks.add(callback);\n  }\n\n  retrySymbolicate(\n    type: StackType,\n    callback?: (status: SymbolicationStatus) => void\n  ): void {\n    this._symbolicate(type, true, callback);\n  }\n\n  symbolicate(\n    type: StackType,\n    callback?: (status: SymbolicationStatus) => void\n  ): void {\n    this._symbolicate(type, false, callback);\n  }\n\n  private _symbolicate(\n    type: StackType,\n    retry: boolean,\n    callback?: (status: SymbolicationStatus) => void\n  ): void {\n    if (callback) {\n      this.pushCallback(type, callback);\n    }\n    const status = this.symbolicated[type].status;\n\n    if (status === \"COMPLETE\") {\n      return this.flushCallbacks(type);\n    }\n\n    if (retry) {\n      LogBoxSymbolication.deleteStack(this.getStack(type));\n      this.handleSymbolicate(type);\n    } else {\n      if (status === \"NONE\") {\n        this.handleSymbolicate(type);\n      }\n    }\n  }\n\n  private componentStackCache: Stack | null = null;\n\n  private getStack(type: StackType): Stack {\n    if (type === \"component\") {\n      if (this.componentStackCache == null) {\n        this.componentStackCache = componentStackToStack(this.componentStack);\n      }\n      return this.componentStackCache;\n    }\n    return this.stack;\n  }\n\n  private handleSymbolicate(type: StackType): void {\n    if (type === \"component\" && !this.componentStack?.length) {\n      return;\n    }\n\n    if (this.symbolicated[type].status !== \"PENDING\") {\n      this.updateStatus(type, null, null, null);\n      LogBoxSymbolication.symbolicate(this.getStack(type)).then(\n        (data) => {\n          this.updateStatus(type, null, data?.stack, data?.codeFrame);\n        },\n        (error) => {\n          this.updateStatus(type, error, null, null);\n        }\n      );\n    }\n  }\n\n  private updateStatus(\n    type: StackType,\n    error?: Error | null,\n    stack?: Stack | null,\n    codeFrame?: CodeFrame | null\n  ): void {\n    const lastStatus = this.symbolicated[type].status;\n    if (error != null) {\n      this.symbolicated[type] = {\n        error,\n        stack: null,\n        status: \"FAILED\",\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n\n      this.symbolicated[type] = {\n        error: null,\n        stack,\n        status: \"COMPLETE\",\n      };\n    } else {\n      this.symbolicated[type] = {\n        error: null,\n        stack: null,\n        status: \"PENDING\",\n      };\n    }\n\n    const status = this.symbolicated[type].status;\n    if (lastStatus !== status) {\n      if ([\"COMPLETE\", \"FAILED\"].includes(status)) {\n        this.flushCallbacks(type);\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}