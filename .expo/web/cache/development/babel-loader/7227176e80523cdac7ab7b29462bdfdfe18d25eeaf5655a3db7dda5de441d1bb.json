{"ast":null,"code":"import { useLayoutEffect } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar canWarn = Platform.select({\n  native: process.env.NODE_ENV !== \"production\",\n  default: process.env.NODE_ENV !== \"production\" && typeof window !== \"undefined\"\n});\nvar warned = new Set();\nexport function useWarnOnce(message) {\n  var guard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : message;\n  useLayoutEffect(function () {\n    if (guard && canWarn && !warned.has(key)) {\n      warned.add(key);\n      console.warn(message);\n    }\n  }, [guard]);\n}\nexport function useDeprecated(message) {\n  var guard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : message;\n  return useWarnOnce(key, guard, `Expo Router: ${message}`);\n}","map":{"version":3,"names":["useLayoutEffect","Platform","canWarn","select","native","process","env","NODE_ENV","default","window","warned","Set","useWarnOnce","message","guard","arguments","length","undefined","key","has","add","console","warn","useDeprecated"],"sources":["C:/Users/Bartek/react_native_boi/node_modules/expo-router/src/useDeprecated.ts"],"sourcesContent":["import { useLayoutEffect } from \"react\";\nimport { Platform } from \"react-native\";\n\n// Node environment may render in multiple processes causing the warning to log mutiple times\n// Hence we skip the warning in these environments.\nconst canWarn = Platform.select({\n  native: process.env.NODE_ENV !== \"production\",\n  default:\n    process.env.NODE_ENV !== \"production\" && typeof window !== \"undefined\",\n});\n\nconst warned = new Set<string>();\n\nexport function useWarnOnce(\n  message: string,\n  guard: unknown = true,\n  key = message\n) {\n  // useLayoutEffect typically doesn't run in node environments.\n  // Combined with skipWarn, this should prevent unwanted warnings during SSR rendering\n  useLayoutEffect(() => {\n    if (guard && canWarn && !warned.has(key)) {\n      warned.add(key);\n      console.warn(message);\n    }\n  }, [guard]);\n}\n\nexport function useDeprecated(\n  /** The deprecated message to display */\n  message: string,\n  /** The guard to cause the warning to being displayed */\n  guard: unknown = true,\n  /** The key to use for the warning. Used to detect if the warning has already been shown. */\n  key = message\n) {\n  return useWarnOnce(key, guard, `Expo Router: ${message}`);\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,OAAO;AAAC,OAAAC,QAAA;AAKxC,IAAMC,OAAO,GAAGD,QAAQ,CAACE,MAAM,CAAC;EAC9BC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;EAC7CC,OAAO,EACLH,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,OAAOE,MAAM,KAAK;AAC/D,CAAC,CAAC;AAEF,IAAMC,MAAM,GAAG,IAAIC,GAAG,CAAS,CAAC;AAEhC,OAAO,SAASC,WAAWA,CACzBC,OAAe,EAGf;EAAA,IAFAC,KAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IACrBG,GAAG,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGF,OAAO;EAIbb,eAAe,CAAC,YAAM;IACpB,IAAIc,KAAK,IAAIZ,OAAO,IAAI,CAACQ,MAAM,CAACS,GAAG,CAACD,GAAG,CAAC,EAAE;MACxCR,MAAM,CAACU,GAAG,CAACF,GAAG,CAAC;MACfG,OAAO,CAACC,IAAI,CAACT,OAAO,CAAC;IACvB;EACF,CAAC,EAAE,CAACC,KAAK,CAAC,CAAC;AACb;AAEA,OAAO,SAASS,aAAaA,CAE3BV,OAAe,EAKf;EAAA,IAHAC,KAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IAErBG,GAAG,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGF,OAAO;EAEb,OAAOD,WAAW,CAACM,GAAG,EAAEJ,KAAK,EAAG,gBAAeD,OAAQ,EAAC,CAAC;AAC3D"},"metadata":{},"sourceType":"module","externalDependencies":[]}