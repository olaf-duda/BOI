{"ast":null,"code":"\"use strict\";\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.symbolicate = exports.deleteStack = void 0;\nvar symbolicateStackTrace_1 = __importDefault(require(\"../modules/symbolicateStackTrace\"));\nvar cache = new Map();\nvar sanitize = function sanitize(_ref) {\n  var maybeStack = _ref.stack,\n    codeFrame = _ref.codeFrame;\n  if (!Array.isArray(maybeStack)) {\n    throw new Error(\"Expected stack to be an array.\");\n  }\n  var stack = [];\n  for (var maybeFrame of maybeStack) {\n    var collapse = false;\n    if (\"collapse\" in maybeFrame) {\n      if (typeof maybeFrame.collapse !== \"boolean\") {\n        throw new Error(\"Expected stack frame `collapse` to be a boolean.\");\n      }\n      collapse = maybeFrame.collapse;\n    }\n    stack.push({\n      arguments: [],\n      column: maybeFrame.column,\n      file: maybeFrame.file,\n      lineNumber: maybeFrame.lineNumber,\n      methodName: maybeFrame.methodName,\n      collapse: collapse\n    });\n  }\n  return {\n    stack: stack,\n    codeFrame: codeFrame\n  };\n};\nfunction deleteStack(stack) {\n  cache.delete(stack);\n}\nexports.deleteStack = deleteStack;\nfunction symbolicate(stack) {\n  var promise = cache.get(stack);\n  if (promise == null) {\n    promise = (0, symbolicateStackTrace_1.default)(stack).then(sanitize);\n    cache.set(stack, promise);\n  }\n  return promise;\n}\nexports.symbolicate = symbolicate;","map":{"version":3,"names":["symbolicateStackTrace_1","__importDefault","require","cache","Map","sanitize","_ref","maybeStack","stack","codeFrame","Array","isArray","Error","maybeFrame","collapse","push","arguments","column","file","lineNumber","methodName","deleteStack","delete","exports","symbolicate","promise","get","default","then","set"],"sources":["C:\\Users\\Bartek\\react_native_boi\\node_modules\\@expo\\metro-runtime\\src\\error-overlay\\Data\\LogBoxSymbolication.tsx"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { StackFrame as UpstreamStackFrame } from \"stacktrace-parser\";\n\nimport symbolicateStackTrace from \"../modules/symbolicateStackTrace\";\n\ntype SymbolicatedStackTrace = any;\n\ntype StackFrame = UpstreamStackFrame & { collapse?: boolean };\n\nexport type Stack = StackFrame[];\n\nconst cache: Map<Stack, Promise<SymbolicatedStackTrace>> = new Map();\n\n/**\n * Sanitize because sometimes, `symbolicateStackTrace` gives us invalid values.\n */\nconst sanitize = ({\n  stack: maybeStack,\n  codeFrame,\n}: SymbolicatedStackTrace): SymbolicatedStackTrace => {\n  if (!Array.isArray(maybeStack)) {\n    throw new Error(\"Expected stack to be an array.\");\n  }\n  const stack: StackFrame[] = [];\n  for (const maybeFrame of maybeStack) {\n    let collapse = false;\n    if (\"collapse\" in maybeFrame) {\n      if (typeof maybeFrame.collapse !== \"boolean\") {\n        throw new Error(\"Expected stack frame `collapse` to be a boolean.\");\n      }\n      collapse = maybeFrame.collapse;\n    }\n    stack.push({\n      arguments: [],\n      column: maybeFrame.column,\n      file: maybeFrame.file,\n      lineNumber: maybeFrame.lineNumber,\n      methodName: maybeFrame.methodName,\n      collapse,\n    });\n  }\n  return { stack, codeFrame };\n};\n\nexport function deleteStack(stack: Stack): void {\n  cache.delete(stack);\n}\n\nexport function symbolicate(stack: Stack): Promise<SymbolicatedStackTrace> {\n  let promise = cache.get(stack);\n  if (promise == null) {\n    promise = symbolicateStackTrace(stack).then(sanitize);\n    cache.set(stack, promise);\n  }\n\n  return promise;\n}\n"],"mappings":";;;;;;;;;;AAUA,IAAAA,uBAAA,GAAAC,eAAA,CAAAC,OAAA;AAQA,IAAMC,KAAK,GAAgD,IAAIC,GAAG,EAAE;AAKpE,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAAC,IAAA,EAGuC;EAAA,IAF5CC,UAAU,GAAAD,IAAA,CAAjBE,KAAK;IACLC,SAAS,GAAAH,IAAA,CAATG,SAAS;EAET,IAAI,CAACC,KAAK,CAACC,OAAO,CAACJ,UAAU,CAAC,EAAE;IAC9B,MAAM,IAAIK,KAAK,CAAC,gCAAgC,CAAC;;EAEnD,IAAMJ,KAAK,GAAiB,EAAE;EAC9B,KAAK,IAAMK,UAAU,IAAIN,UAAU,EAAE;IACnC,IAAIO,QAAQ,GAAG,KAAK;IACpB,IAAI,UAAU,IAAID,UAAU,EAAE;MAC5B,IAAI,OAAOA,UAAU,CAACC,QAAQ,KAAK,SAAS,EAAE;QAC5C,MAAM,IAAIF,KAAK,CAAC,kDAAkD,CAAC;;MAErEE,QAAQ,GAAGD,UAAU,CAACC,QAAQ;;IAEhCN,KAAK,CAACO,IAAI,CAAC;MACTC,SAAS,EAAE,EAAE;MACbC,MAAM,EAAEJ,UAAU,CAACI,MAAM;MACzBC,IAAI,EAAEL,UAAU,CAACK,IAAI;MACrBC,UAAU,EAAEN,UAAU,CAACM,UAAU;MACjCC,UAAU,EAAEP,UAAU,CAACO,UAAU;MACjCN,QAAQ,EAARA;KACD,CAAC;;EAEJ,OAAO;IAAEN,KAAK,EAALA,KAAK;IAAEC,SAAS,EAATA;EAAS,CAAE;AAC7B,CAAC;AAED,SAAgBY,WAAWA,CAACb,KAAY;EACtCL,KAAK,CAACmB,MAAM,CAACd,KAAK,CAAC;AACrB;AAFAe,OAAA,CAAAF,WAAA,GAAAA,WAAA;AAIA,SAAgBG,WAAWA,CAAChB,KAAY;EACtC,IAAIiB,OAAO,GAAGtB,KAAK,CAACuB,GAAG,CAAClB,KAAK,CAAC;EAC9B,IAAIiB,OAAO,IAAI,IAAI,EAAE;IACnBA,OAAO,GAAG,IAAAzB,uBAAA,CAAA2B,OAAqB,EAACnB,KAAK,CAAC,CAACoB,IAAI,CAACvB,QAAQ,CAAC;IACrDF,KAAK,CAAC0B,GAAG,CAACrB,KAAK,EAAEiB,OAAO,CAAC;;EAG3B,OAAOA,OAAO;AAChB;AARAF,OAAA,CAAAC,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}