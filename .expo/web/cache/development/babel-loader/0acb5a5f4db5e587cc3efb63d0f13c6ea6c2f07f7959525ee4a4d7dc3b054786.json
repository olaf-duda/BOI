{"ast":null,"code":"\"use strict\";\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseLogBoxLog = exports.parseLogBoxException = exports.parseComponentStack = exports.parseInterpolation = void 0;\nvar UTFSequence_1 = __importDefault(require(\"react-native/Libraries/UTFSequence\"));\nvar parseErrorStack_1 = __importDefault(require(\"../modules/parseErrorStack\"));\nvar stringifySafe_1 = __importDefault(require(\"../modules/stringifySafe\"));\nvar BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\nvar BABEL_CODE_FRAME_ERROR_FORMAT = /^(?:TransformError )?(?:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*):? (?:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?)(\\/(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*): ((?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+?)\\n([ >]{2}[\\t-\\r 0-9\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+ \\|(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+|\\x1B(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)/;\nvar METRO_ERROR_FORMAT = /^(?:InternalError Metro has encountered an error:) ((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*): ((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*) \\(([0-9]+):([0-9]+)\\)\\n\\n((?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)/;\nvar SUBSTITUTION = UTFSequence_1.default.BOM + \"%s\";\nfunction parseInterpolation(args) {\n  var categoryParts = [];\n  var contentParts = [];\n  var substitutionOffsets = [];\n  var remaining = _toConsumableArray(args);\n  if (typeof remaining[0] === \"string\") {\n    var formatString = String(remaining.shift());\n    var formatStringParts = formatString.split(\"%s\");\n    var substitutionCount = formatStringParts.length - 1;\n    var substitutions = remaining.splice(0, substitutionCount);\n    var categoryString = \"\";\n    var contentString = \"\";\n    var substitutionIndex = 0;\n    for (var formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          var substitution = typeof substitutions[substitutionIndex] === \"string\" ? substitutions[substitutionIndex] : (0, stringifySafe_1.default)(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length\n          });\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length\n          });\n          categoryString += \"%s\";\n          contentString += \"%s\";\n        }\n        substitutionIndex++;\n      }\n    }\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n  var remainingArgs = remaining.map(function (arg) {\n    return typeof arg === \"string\" ? arg : (0, stringifySafe_1.default)(arg);\n  });\n  categoryParts.push.apply(categoryParts, _toConsumableArray(remainingArgs));\n  contentParts.push.apply(contentParts, _toConsumableArray(remainingArgs));\n  return {\n    category: categoryParts.join(\" \"),\n    message: {\n      content: contentParts.join(\" \"),\n      substitutions: substitutionOffsets\n    }\n  };\n}\nexports.parseInterpolation = parseInterpolation;\nfunction isComponentStack(consoleArgument) {\n  var isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  var isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  var isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n  return isOldComponentStackFormat || isNewComponentStackFormat || isNewJSCComponentStackFormat;\n}\nfunction parseComponentStack(message) {\n  var stack = (0, parseErrorStack_1.default)(message);\n  if (stack && stack.length > 0) {\n    return stack.map(function (frame) {\n      return {\n        content: frame.methodName,\n        collapse: frame.collapse || false,\n        fileName: frame.file == null ? \"unknown\" : frame.file,\n        location: {\n          column: frame.column == null ? -1 : frame.column,\n          row: frame.lineNumber == null ? -1 : frame.lineNumber\n        }\n      };\n    });\n  }\n  return message.split(/\\n {4}in /g).map(function (s) {\n    if (!s) {\n      return null;\n    }\n    var match = s.match(/(.*) \\(at (.*\\.js):([\\d]+)\\)/);\n    if (!match) {\n      return null;\n    }\n    var _match$slice = match.slice(1),\n      _match$slice2 = _slicedToArray(_match$slice, 3),\n      content = _match$slice2[0],\n      fileName = _match$slice2[1],\n      row = _match$slice2[2];\n    return {\n      content: content,\n      fileName: fileName,\n      location: {\n        column: -1,\n        row: parseInt(row, 10)\n      }\n    };\n  }).filter(Boolean);\n}\nexports.parseComponentStack = parseComponentStack;\nfunction parseLogBoxException(error) {\n  var message = error.originalMessage != null ? error.originalMessage : \"Unknown\";\n  var metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    var _metroInternalError$s = metroInternalError.slice(1),\n      _metroInternalError$s2 = _slicedToArray(_metroInternalError$s, 5),\n      content = _metroInternalError$s2[0],\n      fileName = _metroInternalError$s2[1],\n      row = _metroInternalError$s2[2],\n      column = _metroInternalError$s2[3],\n      codeFrame = _metroInternalError$s2[4];\n    return {\n      level: \"fatal\",\n      type: \"Metro Error\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName: fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10)\n        },\n        content: codeFrame\n      },\n      message: {\n        content: content,\n        substitutions: []\n      },\n      category: `${fileName}-${row}-${column}`\n    };\n  }\n  var babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    var _babelTransformError$ = babelTransformError.slice(1),\n      _babelTransformError$2 = _slicedToArray(_babelTransformError$, 5),\n      _fileName = _babelTransformError$2[0],\n      _content = _babelTransformError$2[1],\n      _row = _babelTransformError$2[2],\n      _column = _babelTransformError$2[3],\n      _codeFrame = _babelTransformError$2[4];\n    return {\n      level: \"syntax\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName: _fileName,\n        location: {\n          row: parseInt(_row, 10),\n          column: parseInt(_column, 10)\n        },\n        content: _codeFrame\n      },\n      message: {\n        content: _content,\n        substitutions: []\n      },\n      category: `${_fileName}-${_row}-${_column}`\n    };\n  }\n  var babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n  if (babelCodeFrameError) {\n    var _babelCodeFrameError$ = babelCodeFrameError.slice(1),\n      _babelCodeFrameError$2 = _slicedToArray(_babelCodeFrameError$, 3),\n      _fileName2 = _babelCodeFrameError$2[0],\n      _content2 = _babelCodeFrameError$2[1],\n      _codeFrame2 = _babelCodeFrameError$2[2];\n    return {\n      level: \"syntax\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName: _fileName2,\n        location: null,\n        content: _codeFrame2\n      },\n      message: {\n        content: _content2,\n        substitutions: []\n      },\n      category: `${_fileName2}-${1}-${1}`\n    };\n  }\n  if (message.match(/^TransformError /)) {\n    return {\n      level: \"syntax\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: []\n      },\n      category: message\n    };\n  }\n  var componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return _objectSpread({\n      level: \"fatal\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: componentStack != null ? parseComponentStack(componentStack) : []\n    }, parseInterpolation([message]));\n  }\n  if (componentStack != null) {\n    return _objectSpread({\n      level: \"error\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack)\n    }, parseInterpolation([message]));\n  }\n  return _objectSpread({\n    level: \"error\",\n    stack: error.stack,\n    isComponentError: error.isComponentError\n  }, parseLogBoxLog([message]));\n}\nexports.parseLogBoxException = parseLogBoxException;\nfunction parseLogBoxLog(args) {\n  var message = args[0];\n  var argsWithoutComponentStack = [];\n  var componentStack = [];\n  if (typeof message === \"string\" && message.slice(-2) === \"%s\" && args.length > 0) {\n    var lastArg = args[args.length - 1];\n    if (typeof lastArg === \"string\" && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n  if (componentStack.length === 0) {\n    for (var arg of args) {\n      if (typeof arg === \"string\" && isComponentStack(arg)) {\n        var messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n  return _objectSpread(_objectSpread({}, parseInterpolation(argsWithoutComponentStack)), {}, {\n    componentStack: componentStack\n  });\n}\nexports.parseLogBoxLog = parseLogBoxLog;","map":{"version":3,"names":["UTFSequence_1","__importDefault","require","parseErrorStack_1","stringifySafe_1","BABEL_TRANSFORM_ERROR_FORMAT","BABEL_CODE_FRAME_ERROR_FORMAT","METRO_ERROR_FORMAT","SUBSTITUTION","default","BOM","parseInterpolation","args","categoryParts","contentParts","substitutionOffsets","remaining","_toConsumableArray","formatString","String","shift","formatStringParts","split","substitutionCount","length","substitutions","splice","categoryString","contentString","substitutionIndex","formatStringPart","substitution","push","offset","remainingArgs","map","arg","apply","category","join","message","content","exports","isComponentStack","consoleArgument","isOldComponentStackFormat","test","isNewComponentStackFormat","isNewJSCComponentStackFormat","parseComponentStack","stack","frame","methodName","collapse","fileName","file","location","column","row","lineNumber","s","match","_match$slice","slice","_match$slice2","_slicedToArray","parseInt","filter","Boolean","parseLogBoxException","error","originalMessage","metroInternalError","_metroInternalError$s","_metroInternalError$s2","codeFrame","level","type","isComponentError","componentStack","babelTransformError","_babelTransformError$","_babelTransformError$2","babelCodeFrameError","_babelCodeFrameError$","_babelCodeFrameError$2","isFatal","_objectSpread","parseLogBoxLog","argsWithoutComponentStack","lastArg","messageEndIndex","search"],"sources":["C:\\Users\\Bartek\\react_native_boi\\node_modules\\@expo\\metro-runtime\\src\\error-overlay\\Data\\parseLogBoxLog.tsx"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-expect-error\nimport UTFSequence from \"react-native/Libraries/UTFSequence\";\n\nimport parseErrorStack from \"../modules/parseErrorStack\";\nimport stringifySafe from \"../modules/stringifySafe\";\nimport type { LogBoxLogData } from \"./LogBoxLog\";\ntype ExceptionData = any;\n\nconst BABEL_TRANSFORM_ERROR_FORMAT =\n  /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\nconst BABEL_CODE_FRAME_ERROR_FORMAT =\n  /^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)/u;\nconst METRO_ERROR_FORMAT =\n  /^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/u;\n\nexport type ExtendedExceptionData = ExceptionData & {\n  isComponentError: boolean;\n  [key: string]: any;\n};\nexport type Category = string;\nexport type CodeFrame = {\n  content: string;\n  location?: {\n    row: number;\n    column: number;\n    [key: string]: any;\n  } | null;\n  fileName: string;\n\n  // TODO: When React switched to using call stack frames,\n  // we gained the ability to use the collapse flag, but\n  // it is not integrated into the LogBox UI.\n  collapse?: boolean;\n};\n\nexport type Message = {\n  content: string;\n  substitutions: {\n    length: number;\n    offset: number;\n  }[];\n};\n\nexport type ComponentStack = CodeFrame[];\n\nconst SUBSTITUTION = UTFSequence.BOM + \"%s\";\n\nexport function parseInterpolation(args: readonly any[]): {\n  category: Category;\n  message: Message;\n} {\n  const categoryParts: string[] = [];\n  const contentParts: string[] = [];\n  const substitutionOffsets: { length: number; offset: number }[] = [];\n\n  const remaining = [...args];\n  if (typeof remaining[0] === \"string\") {\n    const formatString = String(remaining.shift());\n    const formatStringParts = formatString.split(\"%s\");\n    const substitutionCount = formatStringParts.length - 1;\n    const substitutions = remaining.splice(0, substitutionCount);\n\n    let categoryString = \"\";\n    let contentString = \"\";\n\n    let substitutionIndex = 0;\n    for (const formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          // Don't stringify a string type.\n          // It adds quotation mark wrappers around the string,\n          // which causes the LogBox to look odd.\n          const substitution =\n            typeof substitutions[substitutionIndex] === \"string\"\n              ? substitutions[substitutionIndex]\n              : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length,\n          });\n\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length,\n          });\n\n          categoryString += \"%s\";\n          contentString += \"%s\";\n        }\n\n        substitutionIndex++;\n      }\n    }\n\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n\n  const remainingArgs = remaining.map((arg) => {\n    // Don't stringify a string type.\n    // It adds quotation mark wrappers around the string,\n    // which causes the LogBox to look odd.\n    return typeof arg === \"string\" ? arg : stringifySafe(arg);\n  });\n  categoryParts.push(...remainingArgs);\n  contentParts.push(...remainingArgs);\n\n  return {\n    category: categoryParts.join(\" \"),\n    message: {\n      content: contentParts.join(\" \"),\n      substitutions: substitutionOffsets,\n    },\n  };\n}\n\nfunction isComponentStack(consoleArgument: string) {\n  const isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  const isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  const isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n\n  return (\n    isOldComponentStackFormat ||\n    isNewComponentStackFormat ||\n    isNewJSCComponentStackFormat\n  );\n}\n\nexport function parseComponentStack(message: string): ComponentStack {\n  // In newer versions of React, the component stack is formatted as a call stack frame.\n  // First try to parse the component stack as a call stack frame, and if that doesn't\n  // work then we'll fallback to the old custom component stack format parsing.\n  const stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return stack.map((frame) => ({\n      content: frame.methodName,\n      collapse: frame.collapse || false,\n      fileName: frame.file == null ? \"unknown\" : frame.file,\n      location: {\n        column: frame.column == null ? -1 : frame.column,\n        row: frame.lineNumber == null ? -1 : frame.lineNumber,\n      },\n    }));\n  }\n\n  return message\n    .split(/\\n {4}in /g)\n    .map((s) => {\n      if (!s) {\n        return null;\n      }\n      const match = s.match(/(.*) \\(at (.*\\.js):([\\d]+)\\)/);\n      if (!match) {\n        return null;\n      }\n\n      const [content, fileName, row] = match.slice(1);\n      return {\n        content,\n        fileName,\n        location: { column: -1, row: parseInt(row, 10) },\n      };\n    })\n    .filter(Boolean) as ComponentStack;\n}\n\nexport function parseLogBoxException(\n  error: ExtendedExceptionData\n): LogBoxLogData {\n  const message =\n    error.originalMessage != null ? error.originalMessage : \"Unknown\";\n\n  const metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    const [content, fileName, row, column, codeFrame] =\n      metroInternalError.slice(1);\n\n    return {\n      level: \"fatal\",\n      type: \"Metro Error\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    // Transform errors are thrown from inside the Babel transformer.\n    const [fileName, content, row, column, codeFrame] =\n      babelTransformError.slice(1);\n\n    return {\n      level: \"syntax\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n\n  if (babelCodeFrameError) {\n    // Codeframe errors are thrown from any use of buildCodeFrameError.\n    const [fileName, content, codeFrame] = babelCodeFrameError.slice(1);\n    return {\n      level: \"syntax\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: null, // We are not given the location.\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${1}-${1}`,\n    };\n  }\n\n  if (message.match(/^TransformError /)) {\n    return {\n      level: \"syntax\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: [],\n      },\n      category: message,\n    };\n  }\n\n  const componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return {\n      level: \"fatal\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack:\n        componentStack != null ? parseComponentStack(componentStack) : [],\n      ...parseInterpolation([message]),\n    };\n  }\n\n  if (componentStack != null) {\n    // It is possible that console errors have a componentStack.\n    return {\n      level: \"error\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack),\n      ...parseInterpolation([message]),\n    };\n  }\n\n  // Most `console.error` calls won't have a componentStack. We parse them like\n  // regular logs which have the component stack burried in the message.\n  return {\n    level: \"error\",\n    stack: error.stack,\n    isComponentError: error.isComponentError,\n    ...parseLogBoxLog([message]),\n  };\n}\n\nexport function parseLogBoxLog(args: readonly any[]): {\n  componentStack: ComponentStack;\n  category: Category;\n  message: Message;\n} {\n  const message = args[0];\n  let argsWithoutComponentStack: any[] = [];\n  let componentStack: ComponentStack = [];\n\n  // Extract component stack from warnings like \"Some warning%s\".\n  if (\n    typeof message === \"string\" &&\n    message.slice(-2) === \"%s\" &&\n    args.length > 0\n  ) {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === \"string\" && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n\n  if (componentStack.length === 0) {\n    // Try finding the component stack elsewhere.\n    for (const arg of args) {\n      if (typeof arg === \"string\" && isComponentStack(arg)) {\n        // Strip out any messages before the component stack.\n        let messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          // Handle JSC component stacks.\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n\n  return {\n    ...parseInterpolation(argsWithoutComponentStack),\n    componentStack,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}