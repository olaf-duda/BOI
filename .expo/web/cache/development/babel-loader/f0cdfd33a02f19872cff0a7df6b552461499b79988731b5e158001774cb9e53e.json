{"ast":null,"code":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar LogBox;\nif (__DEV__) {\n  var LogBoxData = require(\"./Data/LogBoxData\");\n  var _require = require(\"./Data/parseLogBoxLog\"),\n    parseLogBoxLog = _require.parseLogBoxLog,\n    parseInterpolation = _require.parseInterpolation;\n  var originalConsoleError;\n  var consoleErrorImpl;\n  var isLogBoxInstalled = false;\n  LogBox = {\n    install: function install() {\n      if (isLogBoxInstalled) {\n        return;\n      }\n      isLogBoxInstalled = true;\n      var isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n        console.error = function () {\n          consoleErrorImpl === null || consoleErrorImpl === void 0 ? void 0 : consoleErrorImpl.apply(void 0, arguments);\n        };\n      }\n      consoleErrorImpl = registerError;\n      if (react_native_1.Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n    },\n    uninstall: function uninstall() {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n      isLogBoxInstalled = false;\n      consoleErrorImpl = originalConsoleError;\n      delete console.disableLogBox;\n    },\n    isInstalled: function isInstalled() {\n      return isLogBoxInstalled;\n    },\n    ignoreLogs: function ignoreLogs(patterns) {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n    ignoreAllLogs: function ignoreAllLogs(value) {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n    clearAllLogs: function clearAllLogs() {\n      LogBoxData.clear();\n    },\n    addLog: function addLog(log) {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n    addException: function addException(error) {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    }\n  };\n  var isWarningModuleWarning = function isWarningModuleWarning() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return typeof args[0] === \"string\" && args[0].startsWith(\"Warning: \");\n  };\n  var registerError = function registerError() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError === null || originalConsoleError === void 0 ? void 0 : originalConsoleError.apply(void 0, args);\n      return;\n    }\n    try {\n      if (!isWarningModuleWarning.apply(void 0, args)) {\n        originalConsoleError === null || originalConsoleError === void 0 ? void 0 : originalConsoleError.apply(void 0, args);\n        return;\n      }\n      var _parseLogBoxLog = parseLogBoxLog(args),\n        category = _parseLogBoxLog.category,\n        message = _parseLogBoxLog.message,\n        componentStack = _parseLogBoxLog.componentStack;\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        var interpolated = parseInterpolation(args);\n        originalConsoleError === null || originalConsoleError === void 0 ? void 0 : originalConsoleError(interpolated.message.content);\n        LogBoxData.addLog({\n          level: /did not match\\. Server:/.test(message.content) ? \"fatal\" : \"error\",\n          category: category,\n          message: message,\n          componentStack: componentStack\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportUnexpectedLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install: function install() {},\n    uninstall: function uninstall() {},\n    isInstalled: function isInstalled() {\n      return false;\n    },\n    ignoreLogs: function ignoreLogs(patterns) {},\n    ignoreAllLogs: function ignoreAllLogs(value) {},\n    clearAllLogs: function clearAllLogs() {},\n    addLog: function addLog(log) {},\n    addException: function addException(ex) {}\n  };\n}\nmodule.exports = LogBox;\nexports.default = LogBox;","map":{"version":3,"names":["LogBox","__DEV__","LogBoxData","require","_require","parseLogBoxLog","parseInterpolation","originalConsoleError","consoleErrorImpl","isLogBoxInstalled","install","isFirstInstall","console","error","bind","apply","arguments","registerError","react_native_1","Platform","isTesting","setDisabled","uninstall","disableLogBox","isInstalled","ignoreLogs","patterns","addIgnorePatterns","ignoreAllLogs","value","clearAllLogs","clear","addLog","log","addException","isWarningModuleWarning","_len","length","args","Array","_key","startsWith","_len2","_key2","isLogBoxErrorMessage","_parseLogBoxLog","category","message","componentStack","isMessageIgnored","content","interpolated","level","test","err","reportUnexpectedLogBoxError","ex","module","exports","default"],"sources":["C:\\Users\\Bartek\\react_native_boi\\node_modules\\@expo\\metro-runtime\\src\\error-overlay\\LogBox.web.ts"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Platform } from \"react-native\";\n\nimport { IgnorePattern, LogData } from \"./Data/LogBoxData\";\nimport { ExtendedExceptionData } from \"./Data/parseLogBoxLog\";\n\nexport { LogData, ExtendedExceptionData, IgnorePattern };\n\nlet LogBox: ILogBox;\n\ninterface ILogBox {\n  install(): void;\n  uninstall(): void;\n  isInstalled(): boolean;\n  ignoreLogs(patterns: readonly IgnorePattern[]): void;\n  ignoreAllLogs(ignore?: boolean): void;\n  clearAllLogs(): void;\n  addLog(log: LogData): void;\n  addException(error: ExtendedExceptionData): void;\n}\n\n/**\n * LogBox displays logs in the app.\n */\nif (__DEV__) {\n  const LogBoxData = require(\"./Data/LogBoxData\");\n  const { parseLogBoxLog, parseInterpolation } =\n    require(\"./Data/parseLogBoxLog\") as typeof import(\"./Data/parseLogBoxLog\");\n\n  let originalConsoleError: typeof console.error | undefined;\n  let consoleErrorImpl: typeof console.error | undefined;\n\n  let isLogBoxInstalled: boolean = false;\n\n  LogBox = {\n    install(): void {\n      if (isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = true;\n\n      // Trigger lazy initialization of module.\n      // require(\"../NativeModules/specs/NativeLogBox\");\n\n      // IMPORTANT: we only overwrite `console.error` and `console.warn` once.\n      // When we uninstall we keep the same reference and only change its\n      // internal implementation\n      const isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n\n        console.error = (...args) => {\n          consoleErrorImpl?.(...args);\n        };\n      }\n\n      consoleErrorImpl = registerError;\n\n      if (Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n    },\n\n    uninstall(): void {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = false;\n\n      // IMPORTANT: we don't re-assign to `console` in case the method has been\n      // decorated again after installing LogBox. E.g.:\n      // Before uninstalling: original > LogBox > OtherErrorHandler\n      // After uninstalling:  original > LogBox (noop) > OtherErrorHandler\n      consoleErrorImpl = originalConsoleError;\n      delete (console as any).disableLogBox;\n    },\n\n    isInstalled(): boolean {\n      return isLogBoxInstalled;\n    },\n\n    ignoreLogs(patterns: readonly IgnorePattern[]): void {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n\n    ignoreAllLogs(value?: boolean): void {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n\n    clearAllLogs(): void {\n      LogBoxData.clear();\n    },\n\n    addLog(log: LogData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    },\n  };\n\n  const isWarningModuleWarning = (...args: any) => {\n    return typeof args[0] === \"string\" && args[0].startsWith(\"Warning: \");\n  };\n\n  const registerError = (...args: Parameters<typeof console.error>): void => {\n    // Let errors within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError?.(...args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning(...args)) {\n        // Only show LogBox for the 'warning' module, otherwise pass through.\n        // By passing through, this will get picked up by the React console override,\n        // potentially adding the component stack. React then passes it back to the\n        // React Native ExceptionsManager, which reports it to LogBox as an error.\n        //\n        // The 'warning' module needs to be handled here because React internally calls\n        // `console.error('Warning: ')` with the component stack already included.\n        originalConsoleError?.(...args);\n        return;\n      }\n\n      const { category, message, componentStack } = parseLogBoxLog(args);\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        // Interpolate the message so they are formatted for adb and other CLIs.\n        // This is different than the message.content above because it includes component stacks.\n        const interpolated = parseInterpolation(args);\n        originalConsoleError?.(interpolated.message.content);\n\n        LogBoxData.addLog({\n          // Always show the static rendering issues as full screen since they\n          // are too confusing otherwise.\n          level: /did not match\\. Server:/.test(message.content)\n            ? \"fatal\"\n            : \"error\",\n          category,\n          message,\n          componentStack,\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportUnexpectedLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install(): void {},\n    uninstall(): void {},\n    isInstalled(): boolean {\n      return false;\n    },\n    ignoreLogs(patterns: readonly IgnorePattern[]): void {},\n    ignoreAllLogs(value?: boolean): void {},\n    clearAllLogs(): void {},\n    addLog(log: LogData): void {},\n    addException(ex: ExtendedExceptionData): void {},\n  };\n}\n\nmodule.exports = LogBox;\n\nexport default LogBox;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}